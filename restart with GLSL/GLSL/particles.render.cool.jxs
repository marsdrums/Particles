<jittershader name="fill-flat-quads">
	<description>Default Shader </description>
	<param name="MV" type="mat4" state="MODELVIEW_MATRIX" />
	<param name="P" type="mat4" state="PROJECTION_MATRIX" />
	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="prevMVP" type="mat4" state="PREV_MODELVIEW_PROJECTION_MATRIX" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="posAge" type="int" default="0" />
	<param name="prevPosTex" type="int" default="1" />
	<param name="farClip" type="float" state="FAR_CLIP" />
	<param name="nearClip" type="float" state="NEAR_CLIP" />
	<param name="focus" type="float" default="1" />
	<param name="dof" type="float" default="0" />
	<param name="size" type="float" default="0.002" />
	<param name="alpha" type="float" default="0.3" />

	<language name="glsl" version="1.5">
		<bind param="MV" program="vp" />
		<bind param="MV" program="gp" />
		<bind param="MVP" program="gp" />
		<bind param="MVP" program="vp" />
		<bind param="prevMVP" program="gp" />
		<bind param="P" program="gp" />
		<bind param="uv" program="vp" />
		<bind param="posAge" program="vp" />
		<bind param="prevPosTex" program="gp" />
		<bind param="farClip" program="gp" />
		<bind param="nearClip" program="gp" />
		<bind param="focus" program="gp" />
		<bind param="dof" program="gp" />
		<bind param="size" program="gp" />
		<bind param="alpha" program="gp" />
		<program name="vp" type="vertex">
<![CDATA[
#version 330 core
uniform mat4 MV, MVP;
uniform sampler2DRect posAge;
in vec2 uv;

out jit_PerVertex {
	flat float draw;
	flat vec2 uv;
	//flat vec4 currPosWorld;
} jit_out;

void main() {	
	vec4 lookup = texture(posAge, uv);
	gl_Position = vec4(lookup.xyz, 1.);	
	jit_out.draw = lookup.w;
	jit_out.uv = uv;
	//jit_out.currPosWorld = vec4(lookup.xyz, 1.);
}
]]>
		</program>
		<program name="gp" output_type="triangle_strip" type="geometry">
<![CDATA[
#version 330 core

layout (points) in;
layout (triangle_strip, max_vertices=4) out;

uniform mat4 P, MV, MVP, prevMVP;//, invP;
uniform sampler2DRect prevPosTex;
uniform float farClip, nearClip;
uniform float focus, dof, size, alpha;

in jit_PerVertex {	
	flat float draw;
	flat vec2 uv;
	//flat vec4 currPosWorld;
} jit_in[];

out jit_PerVertex {
	flat vec4 color;	
	smooth vec2 corner;
};

void main() {

	vec4 lookup = texture(prevPosTex, jit_in[0].uv);
	float prev_draw = lookup.w;

	if(jit_in[0].draw == 0. || prev_draw == 0.) return;

	vec4 currPos = MV * gl_in[0].gl_Position;
	vec4 prevPos = MV * vec4(lookup.xyz, 1);
	if(jit_in[0].draw != prev_draw) prevPos = currPos;
	vec4 currPosProj = P * currPos;
	vec4 prevPosProj = P * prevPos;

	float currDepth = currPosProj.z;

	currDepth = dof * sqrt(abs(currDepth - focus)/farClip);

	float finalSizeCurr = (currDepth + 1)*size;

	float compensate_dof = currDepth*3 + 1;

	vec2 up = normalize(currPos.xy - prevPos.xy);
	vec2 right = ( cross(vec3(up,0), vec3(0,0,1)) ).xy;

	vec4 upShift 	= P * (vec4(finalSizeCurr * up, 0, 0));
	vec4 rightShift = P * (vec4(finalSizeCurr * right, 0, 0));

	//float compensate_motion = size / (distance(currPosProj.xy/currPosProj.w, prevPosProj.xy/prevPosProj.w) + size);
	float compensate_motion = size / (distance(currPos.xy, prevPos.xy) + size);

	color.rgb = vec3(1);
	color.a = alpha;
	color.a /= compensate_dof;
	color.a *= compensate_motion;

	gl_Position = currPosProj - rightShift + upShift;	corner = vec2(-1, -1);	EmitVertex();
	gl_Position = currPosProj + rightShift + upShift;	corner = vec2(+1, -1);	EmitVertex();
	gl_Position = prevPosProj - rightShift - upShift;	corner = vec2(-1, +1);	EmitVertex();
	gl_Position = prevPosProj + rightShift - upShift;	corner = vec2(+1, +1);	EmitVertex();
	EndPrimitive();

}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
#version 330 core

in jit_PerVertex {
	flat vec4 color;
	smooth vec2 corner;
} jit_in;

out vec4 color;

void main() {

	float dist = length(jit_in.corner);
	if(dist > 1) discard;
	color.rgb = jit_in.color.rgb;
	color.a = smoothstep(1,0.6,dist)*jit_in.color.a;
}	
]]>
		</program>
	</language>
</jittershader>
