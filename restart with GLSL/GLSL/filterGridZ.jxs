<jittershader name="default">
	<description>Default Slab </description>
	<param name="grid" type="int" default="0" />
	<param name="coordinates" type="int" default="1" />
	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="texcoord" type="vec2" state="TEXCOORD" />
	<param name="color" type="vec4" state="COLOR" />
	<language name="glsl" version="1.5">
		<bind param="grid" program="fp" />
		<bind param="coordinates" program="fp" />
		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="position" program="vp" />
		<bind param="texcoord" program="vp" />
		<bind param="color" program="vp" />
		<program name="vp" type="vertex"  >

<![CDATA[
	#version 330 core
	
	in vec3 position;
	in vec2 texcoord;
	in vec4 color;
	out jit_PerVertex {
		vec2 uv;
	} jit_out;
	uniform mat4 modelViewProjectionMatrix;
	uniform mat4 textureMatrix0;
	
	void main(void) {
		gl_Position = modelViewProjectionMatrix*vec4(position, 1.);
		jit_out.uv = vec2(textureMatrix0*vec4(texcoord, 0., 1.));
	}
]]>
</program>

<program name="fp" type="fragment"  >
<![CDATA[
	#version 330 core
	
	in jit_PerVertex {
		vec2 uv;
	} jit_in;
	layout (location = 0) out vec4 outColor;
	
	uniform sampler2DRect grid, coordinates;

	void main(void) {

		float z = floor(jit_in.uv.x/128) + floor(jit_in.uv.y/256)*16;
		//*** fix the sampling coordinates taking into account the plane leap
		outColor = texture(grid, jit_in.uv);
		float count = 1;
		if(mod(jit_in.uv.x, 128) != 0){
			outColor += texture(grid, jit_in.uv - vec2(1,0));
			count += 1;
		}
		if(mod(jit_in.uv.x, 128) != 127){
			outColor += texture(grid, jit_in.uv + vec2(1,0));
			count += 1;
		}

		outColor /= count;
	}
]]>
</program>
	</language>
</jittershader>
