<jittershader name="fill-flat-quads">
	<description>Default Shader </description>
	<param name="uv" type="vec3" state="POSITION" />
	<param name="posAgeTex" type="int" default="0" />
	<param name="velMassTex" type="int" default="1" />
	<param name="idStateTex" type="int" default="2" />
	<param name="densityMap" type="int" default="3" />
	<param name="MV" type="mat4" state="MODELVIEW_MATRIX" />
	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="P" type="mat4" state="PROJECTION_MATRIX" />
	<param name="eye" type="vec3" state="CAMERA_POSITION" />
	<language name="glsl" version="1.5">
		<bind param="uv" program="vp" />
		<bind param="posAgeTex" program="gp" />
		<bind param="velMassTex" program="gp" />
		<bind param="idStateTex" program="gp" />
		<bind param="posTex" program="vp" />
		<bind param="densityMap" program="gp" />
		<bind param="MV" program="gp" />
		<bind param="MVP" program="gp" />
		<bind param="P" program="gp" />
		<bind param="eye" program="gp" />

		<program name="vp" type="vertex">
<![CDATA[
#version 330 core
in vec3 uv;

out jit_PerVertex {
	flat vec2 uv;	
} jit_out;

void main() {	
	gl_Position = vec4(1);	
	jit_out.uv = uv.xy;
}
]]>
		</program>
		<program name="gp" type="geometry">
<![CDATA[
#version 330 core
#define SIZE 0.002

layout (points) in;
layout (triangle_strip, max_vertices=4) out;

in jit_PerVertex {
	flat vec2 uv;	
} jit_in[];

out jit_PerVertex {
	flat vec4 color;	
	smooth vec2 corner;
};

uniform mat4 MV, MVP, P;
uniform sampler2DRect posAgeTex, velMassTex, idStateTex, densityMap;
uniform vec3 eye;

//Random functions
uint wang_hash(inout uint seed){

    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));
    seed *= uint(9);
    seed = seed ^ (seed >> 4);
    seed *= uint(0x27d4eb2d);
    seed = seed ^ (seed >> 15);
    return seed;
}
 
float RandomFloat01(inout uint seed) { return float(wang_hash(seed)) / 4294967296.0; }

uint getRandSeed(vec2 uv){ return  uint(uv.x*3772) * (uint(uv.y*78223) + uint(1)); }

float readDensity(vec3 pos){

	vec3 origPos = pos;
	pos = (pos + 1)*128;
	pos.xz = mod(pos.xz, vec2(128));
	pos.xy += vec2(	128*floor(mod(pos.z, 16)), 256*floor(pos.z / 16) );
	pos.xy += 0.5;

	vec4 lookup = texture(densityMap, pos.xy);
	if(origPos.x < 0 && origPos.z < 0) return lookup.r; 
	if(origPos.x >= 0 && origPos.z < 0)return lookup.g; 
	if(origPos.x < 0 && origPos.z >= 0)return lookup.b; 
	return lookup.a;
}

float calcOcclusion(vec3 pos){

	float totalOcc = 0;
	uint seed = getRandSeed(jit_in[0].uv);

	for(int i = 0; i < 5; i++){
		vec3 ro = pos;
		vec3 rd = normalize(vec3(RandomFloat01(seed),RandomFloat01(seed),RandomFloat01(seed))*2 - 1);
		float step = (2*1.4142135624) / 256;
		float occ = 0;
		float minAxis = min(abs(rd.x), min(abs(rd.y), abs(rd.z)));
		step += minAxis/256;
		step *= RandomFloat01(seed) + 0.5;
		float d = step;

		for(int k = 0; k < 20; k++){

			ro += rd * d;
			//if outside the box, quit
			if(	ro.x < -1 || ro.x > 1 ||
				ro.y < -1 || ro.y > 1 ||
				ro.z < -1 || ro.z > 1){
				break;
			};
			
			occ += readDensity(ro)*0.05;// readDensity(ro) > 0 ? 0.1 : 0
			//occ -= readDensity(ro) > 0 ? 0.1 : 0;
			if(occ >= 1){
				occ = 1;
				break;
			}
			d += step;
		}

		totalOcc += occ;
	}

	return 1 - totalOcc/5;
}

float calcShadow(vec3 ro, vec3 rd){

	float step = (2*1.4142135624) / 256;
	float sha = 1;
	float minAxis = min(abs(rd.x), min(abs(rd.y), abs(rd.z)));
	step += minAxis/256;
	float d = step;
	for(int i = 0; i < 256; i++){

		vec3 p = ro + rd*d;
		//if outside the box, quit
		if(	p.x < -1 || p.x > 1 ||
			p.y < -1 || p.y > 1 ||
			p.z < -1 || p.z > 1) return sha;
		
		//sha -= readDensity(ro)*0.001;// readDensity(ro) > 0 ? 0.1 : 0
		sha -= readDensity(p) > 0 ? 0.1 : 0;
		if(sha <= 0) return 0.;
		d += step;
	}
	return sha;
}

void main() {

	float state = texture(idStateTex, jit_in[0].uv).y;
	if(state == 0) return;

	vec4 lookup = texture(posAgeTex, jit_in[0].uv);
	vec3 vel = texture(velMassTex, jit_in[0].uv).xyz;
	uint seed = getRandSeed(jit_in[0].uv);

	vec3 pos = lookup.xyz - vel*RandomFloat01(seed);
	vec3 prevPos = pos - vel;
	vec3 ligDir = normalize(vec3(1,1,0));
	float sha = calcShadow(pos, ligDir);
	float occ = calcOcclusion(pos);

	float velLen = min(length(vel)*200,1);
	vec3 alb = mix(vec3(0,0.5,1), vec3(1,0.5,0), velLen);
	vec3 ligCol = vec3(1);//vec3(0.05,0.2,0.05)*0.5 + 0.5;
	color = vec4(vec3(occ*0.2+sha), 1);//vec4(sha*mix(vec3(0,0.5,1), vec3(1,0.5,0), velLen),0.01*(1 - lookup.a*lookup.a));//texelFetch(colorBuff, 0);
	float final_size = SIZE * (1 - lookup.a);
	vec4 eyePos = MV*vec4(pos, 1);
	vec4 eyePrevPos = MV*vec4(prevPos, 1);
	vec4 meanPos = 0.5*(eyePos + eyePrevPos);
	float dist = length(eyePos.xy - eyePrevPos.xy);
	vec2 eyeDir = (eyePos.xy - eyePrevPos.xy)/dist;
	vec3 front = normalize(cross(vec3(eyeDir, 0), vec3(0,0,-1)));
	eyeDir *= final_size;
	eyeDir *= dist*300 + 1;
	front.xy *= final_size;
	gl_Position = P * (meanPos + vec4(-front.xy - eyeDir, 0, 0));
	corner = vec2(-1, -1);
	EmitVertex();
	gl_Position = P * (meanPos + vec4(+front.xy - eyeDir, 0, 0));
	corner = vec2(+1, -1);
	EmitVertex();
	gl_Position = P * (meanPos + vec4(-front.xy + eyeDir, 0, 0));
	corner = vec2(-1, +1);
	EmitVertex();
	gl_Position = P * (meanPos + vec4(+front.xy + eyeDir, 0, 0));
	corner = vec2(+1, +1);
	EmitVertex();
	EndPrimitive();

}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
#version 330 core

in jit_PerVertex {
	flat vec4 color;
	smooth vec2 corner;
} jit_in;

out vec4 color;

void main() {

	if(length(jit_in.corner) > 1) discard;
	color = jit_in.color;

}	
]]>
		</program>
	</language>
</jittershader>
