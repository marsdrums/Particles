<jittershader name="fill-flat-quads">
	<description>Default Shader </description>
	<param name="uv" type="vec3" state="POSITION" />
	<param name="posAgeTex" type="int" default="0" />
	<param name="velMassTex" type="int" default="1" />
	<param name="idStateTex" type="int" default="2" />
	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="color" type="vec4" state="COLOR" />
	<language name="glsl" version="1.5">
		<bind param="uv" program="vp" />
		<bind param="posAgeTex" program="gp" />
		<bind param="velMassTex" program="gp" />
		<bind param="idStateTex" program="gp" />
		<bind param="posTex" program="vp" />
		<bind param="MVP" program="gp" />
		<bind param="color" program="vp" />
		<program name="vp" type="vertex">
<![CDATA[
#version 330 core
in vec3 uv;
in vec4 color;

out jit_PerVertex {
	flat vec2 uv;	
	flat vec4 color;
} jit_out;

void main() {	
	gl_Position = vec4(1);	
	jit_out.uv = uv.xy;
	jit_out.color = color;
}
]]>
		</program>
		<program name="gp" type="geometry">
<![CDATA[
#version 330 core

layout (points) in;
layout (points, max_vertices=1) out;

in jit_PerVertex {
	flat vec2 uv;	
	flat vec4 color;
} jit_in[];

out jit_PerVertex {
	flat vec4 color;	
};

uniform mat4 MVP;
uniform sampler2DRect posAgeTex, velMassTex, idStateTex;

void main() {

	float state = texture(idStateTex, jit_in[0].uv).y;
	if(state == 0) return;

	gl_Position = MVP * vec4(texture(posAgeTex, jit_in[0].uv).xyz, 1);
	color = jit_in[0].color;
	EmitVertex();
	
	EndPrimitive();
}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
#version 330 core

in jit_PerVertex {
	flat vec4 color;
} jit_in;

out vec4 color;

void main() {
	color = jit_in.color;
}	
]]>
		</program>
	</language>
</jittershader>
