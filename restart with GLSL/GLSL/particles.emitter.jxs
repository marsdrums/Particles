<jittershader name="default">
	<description>Default Slab </description>
	<param name="posAgeTex" type="int" default="0" />
	<param name="velMassTex" type="int" default="1" />
	<param name="idStateTex" type="int" default="2" />
	<param name="randTex" type="int" default="3" />
	<texture file="stbn_unitvec3_2Dx1D_128x128x64_0.png" type="float16" unit="3" rectangle="1" filter="none none" wrap="repeat repeat"/>	
	<param name="texDim" type="vec2" state="TEXDIM0" />
	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="pos" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="counter" type="float" default="0." />
	<param name="rate" type="float" default="30." />

	<param name="initial_speed" type="float" default="0.01" />
	<param name="initial_mass" type="float" default="1" />
	<param name="initial_vel" type="vec3" default="0. 1. 0." />
	<param name="initial_pos" type="vec3" default="0. 0. 0." />
	<param name="prev_initial_pos" type="vec3" default="0. 0. 0." />
	<param name="lifeStep" type="float" default="0.01" />

	<language name="glsl" version="1.5">
		<bind param="posAgeTex" program="fp" />
		<bind param="velMassTex" program="fp" />
		<bind param="idStateTex" program="fp" />
		<bind param="randTex" program="fp" />
		<bind param="texDim" program="vp" />
		<bind param="texDim" program="fp" />
		<bind param="MVP" program="vp" />
		<bind param="pos" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="counter" program="fp" />
		<bind param="rate" program="fp" />

		<bind param="initial_speed" program="fp" />
		<bind param="initial_mass" program="fp" />
		<bind param="initial_vel" program="fp" />
		<bind param="initial_pos" program="fp" />
		<bind param="prev_initial_pos" program="fp" />
		<bind param="lifeStep" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
#version 330 core

in vec3 pos;
in vec2 uv;
in vec4 color;
out jit_PerVertex {
	smooth vec2 uv;
} jit_out;
uniform mat4 MVP;
uniform vec2 texDim;

void main(void) {
	gl_Position = MVP*vec4(pos, 1.);
	jit_out.uv = uv*texDim;
}
]]>
</program>

<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core
#define PI 3.14159265359
#define TWOPI 6.28318530718 
//#define AGING 1/100

in jit_PerVertex {
	smooth vec2 uv;
} jit_in;

layout (location = 0) out vec4 outPosAge;
layout (location = 1) out vec4 outVelMass;
layout (location = 2) out vec4 outIdState;

uniform sampler2DRect posAgeTex, velMassTex, idStateTex, randTex;
uniform float initial_mass, initial_speed, lifeStep;
uniform vec3 initial_vel, initial_pos, prev_initial_pos;
uniform float counter, rate;
uniform vec2 texDim;

struct particle{
	vec3 pos;
	vec3 vel;
	float id;
	float mass;
	float state;
	float age;
};

//Random functions
uint wang_hash(inout uint seed)
{
    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));
    seed *= uint(9);
    seed = seed ^ (seed >> 4);
    seed *= uint(0x27d4eb2d);
    seed = seed ^ (seed >> 15);
    return seed;
}
 
float RandomFloat01(inout uint seed)
{
    return float(wang_hash(seed)) / 4294967296.0;
}

vec3 randomUnitVector(inout uint seed)
{
    float z = RandomFloat01(seed) * 2.0f - 1.0f;
    float a = RandomFloat01(seed) * TWOPI;
    float r = sqrt(1.0f - z * z);
    float x = r * cos(a);
    float y = r * sin(a);
    return vec3(x, y, z);
}

uint getRandSeed(vec2 uv){ 
	return  uint(uv.x*3772) + uint(uv.y*78223); 
}

float computeID(){ return floor(jit_in.uv.x + jit_in.uv.y*texDim.x); }

bool toKill(in particle part){ return part.age >= 1.; }
bool toGenerate(in particle part){ return part.id >= counter && part.id < counter + rate; }
bool toUpdate(in particle part){ return part.state != 0; }
bool isDead(in particle part){ return part.state == 0; }
bool isStuck(in particle part){ return part.state == 1; }
/*
vec3 randomUnitVec3(in particle part){
	vec3 variate[8] = vec3[] (	vec3(-1, -1, -1),
								vec3(+1, -1, -1),
								vec3(-1, +1, -1),
								vec3(+1, +1, -1),
								vec3(-1, -1, +1),
								vec3(+1, -1, +1),
								vec3(-1, +1, +1),
								vec3(+1, +1, +1));

	return 	variate[int(floor(part.id/16384)) % 8] * 
			(2*texture(randTex, vec2( mod(part.id, 128), mod(floor(part.id/128), 128))).xyz - 1);
}
*/
void initializeParticles(inout particle part){

	uint seed = getRandSeed(jit_in.uv.xy);

	part.pos = mix(initial_pos, prev_initial_pos, RandomFloat01(seed));
	part.vel = randomUnitVector(seed) * initial_speed * (RandomFloat01(seed)*0.5 + 0.5);//initial_vel*initial_speed;
	part.mass = initial_mass;// * (RandomFloat01(seed)*0.5 + 0.5);
	part.state = 0.5;
	part.age = 0;
}

void killParticle(out particle part){ part.state = 0; }

void updateParticle(inout particle part){

	//if(isDead(part)) return;
	part.pos += isStuck(part) ? vec3(0) : part.vel; 	
	part.age += lifeStep;
}

void getCurrentState(out particle part){
	vec4 posAge = texture(posAgeTex, jit_in.uv.xy);
	vec4 velMass = texture(velMassTex, jit_in.uv.xy);
	vec2 idState = texture(idStateTex, jit_in.uv.xy).xy;
	part.pos = posAge.xyz;
	part.age = posAge.a;
	part.vel = velMass.xyz;
	part.mass = velMass.a;
	part.state = idState.y;
	part.id = computeID();
}

void outputTextures(in particle part){
	outPosAge = vec4(part.pos, part.age);
	outVelMass = vec4(part.vel, part.mass);
	outIdState = vec4(part.id, part.state, 0, 0);
}

void main(void) {

	particle part;

	getCurrentState(part);

	//kill
	if(toKill(part)){
		killParticle(part);
		outputTextures(part);
		return;
	}

	//generate
	if(toGenerate(part)){
		initializeParticles(part);
		outputTextures(part);
		return;
	} 

	//update
	if(toUpdate(part)){
		updateParticle(part);
		outputTextures(part);
		return;
	}
}

]]>
		</program>
	</language>
</jittershader>
