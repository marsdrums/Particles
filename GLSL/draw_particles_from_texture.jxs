<jittershader name="fill-flat-quads">
	<description>Default Shader </description>
	<param name="MV" type="mat4" state="MODELVIEW_MATRIX" />
	<param name="P" type="mat4" state="PROJECTION_MATRIX" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="posAge" type="int" default="0" />
	<param name="prevPosTex" type="int" default="1" />
	<param name="farClip" type="float" state="FAR_CLIP" />

	<language name="glsl" version="1.5">
		<bind param="MV" program="vp" />
		<bind param="MV" program="gp" />
		<bind param="P" program="gp" />
		<bind param="uv" program="vp" />
		<bind param="posAge" program="vp" />
		<bind param="prevPosTex" program="gp" />
		<bind param="farClip" program="gp" />
		<program name="vp" type="vertex">
<![CDATA[
#version 330 core
uniform mat4 MV;
uniform sampler2DRect posAge;
in vec2 uv;

out jit_PerVertex {
	flat float draw;
	flat vec2 uv;
} jit_out;

void main() {	
	vec4 lookup = texture(posAge, uv);
	gl_Position = MV * vec4(lookup.xyz, 1.);	
	jit_out.draw = lookup.w;
	jit_out.uv = uv;
}
]]>
		</program>
		<program name="gp" output_type="triangle_strip" type="geometry">
<![CDATA[
#version 330 core
#define size 0.015

layout (points) in;
layout (triangle_strip, max_vertices=4) out;

uniform mat4 P, MV;
uniform sampler2DRect prevPosTex;
uniform float farClip;

in jit_PerVertex {	
	flat float draw;
	flat vec2 uv;
} jit_in[];

out jit_PerVertex {
	flat vec4 color;	
	smooth vec2 corner;
};

void main() {

	if(jit_in[0].draw == -1) return;

	vec4 prevPos = MV * vec4(texture(prevPosTex, jit_in[0].uv).xyz, 1);
	float dist = length(prevPos.xyz - gl_in[0].gl_Position.xyz);
	vec2 front = gl_in[0].gl_Position.xy - prevPos.xy;
	vec2 right = ( cross(vec3(0,0,1), normalize(vec3(front,0))) ).xy;
	front *= size;
	right *= size;

	float distance = length(gl_in[0].gl_Position.xyz) / farClip;
	float focus = 0.1;

	distance = abs(distance - focus);
	color = vec4(1,1,1, clamp(0,1,mix(0.05, 0.001, distance*distance)) / (dist*20 + 1));
	//distance = distance*40 + 1;
	//front *= distance;
	//right *= distance;


	gl_Position = P * (gl_in[0].gl_Position + vec4(-right + front, 0, 0));	corner = vec2(-1, -1);	EmitVertex();
	gl_Position = P * (gl_in[0].gl_Position + vec4(+right + front, 0, 0));	corner = vec2(+1, -1);	EmitVertex();
	gl_Position = P * (prevPos + vec4(-right - front, 0, 0));				corner = vec2(-1, +1);	EmitVertex();
	gl_Position = P * (prevPos + vec4(+right - front, 0, 0));				corner = vec2(+1, +1);	EmitVertex();
	
	EndPrimitive();
}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
#version 330 core

in jit_PerVertex {
	flat vec4 color;
	smooth vec2 corner;
} jit_in;

out vec4 color;

void main() {

	float dist = length(jit_in.corner);
	if(dist > 1) discard;
	color.rgb = jit_in.color.rgb;
	color.a = smoothstep(0,1,1-dist)*jit_in.color.a;
}	
]]>
		</program>
	</language>
</jittershader>
